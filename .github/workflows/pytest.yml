---
name: Run pytest

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
      - develop

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  pytest:
    name: Run Pytest
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: scram
          POSTGRES_PASSWORD: ''
          POSTGRES_DB: test_scram
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U scram"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/local.txt

      - name: Apply unapplied migrations
        env:
          POSTGRES_USER: scram
          POSTGRES_DB: test_scram
        run: |
          python manage.py makemigrations --noinput || true
          UNAPPLIED_MIGRATIONS=$(python manage.py showmigrations --plan | grep '\[ \]' | awk '{print $2}')
          if [ -n "$UNAPPLIED_MIGRATIONS" ]; then
            for migration in $UNAPPLIED_MIGRATIONS; do
              python manage.py migrate $migration --fake-initial --noinput
            done
          else
            echo "No unapplied migrations."
          fi

      - name: Check for duplicate migrations
        run: |
          if python manage.py makemigrations --dry-run | grep "No changes detected"; then
            echo "No duplicate migrations detected."
          else
            echo "Warning: Potential duplicate migrations detected. Please review."

      - name: Run Pytest
        env:
          POSTGRES_USER: scram
          POSTGRES_DB: test_scram
        run: pytest
