# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db"
python_files = [
    "tests.py",
    "test_*.py",
]

# ==== Coverage ====
[tool.coverage.run]
include = ["scram/*", "config/*", "translator/*"]
omit = ["**/migrations/*", "scram/contrib/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]
branch = true
data_file = "coverage.coverage"

[tool.coverage.report]
exclude_also = [
    "if debug:",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    ]

# ===== ruff ====
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    "migrations",
]

line-length = 119
target-version = 'py312'

[tool.ruff.lint]
select = [
    "A",     # builtins
    "ASYNC", # async
    "B",     # bugbear
    "BLE",   # blind-except
    "C4",    # comprehensions
    "COM",   # commas
    "D",     # pydocstyle
    "DJ",    # django
    "DTZ",   # datetimez
    "E",     # pycodestyle
    "EM",    # errmsg
    "F",     # pyflakes
    "FBT",   # boolean-trap
    "G",     # logging-format
    "I",     # isort
    "ICN",   # import-conventions
    "ISC",   # implicit-str-concat
    "LOG",   # logging
    "N",     # pep8-naming
    "PIE",   # pie
    "Q",     # quotes
    "RSE",   # raise
    "RET",   # return
    "S",     # bandit
    "SIM",   # simplify
    "T20",   # print
    "UP",    # pyupgrade
]
ignore = [
    "SIM102", # Use a single `if` statement instead of nested `if` statements
    "SIM108", # Use ternary operator instead of `if`-`else`-block
]

[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = [
    "S101", # use of assert
    "S106", # hardcoded password
]
"test.py" = [
    "S105", # hardcoded password as argument
]
"factories.py" = [
    "FBT001", # minimal issue; don't need to mess with in the User app
]

# ==== isort ====
[tool.isort]
profile = "black"
line_length = 119
known_first_party = [
    "scram",
    "config",
]
skip = ["venv/"]
skip_glob = ["**/migrations/*.py"]


# ==== mypy ====
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"


# ==== PyLint ====
[tool.pylint.MASTER]
load-plugins = [
    "pylint_django",
]
django-settings-module = "config.settings.local"

[tool.pylint.FORMAT]
max-line-length = 119

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "missing-docstring",
    "invalid-name",
]

[tool.pylint.DESIGN]
max-parents = 13

[tool.pylint.TYPECHECK]
generated-members = [
    "REQUEST",
    "acl_users",
    "aq_parent",
    "[a-zA-Z]+_set{1,2}",
    "save",
    "delete",
]


# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/Riverside-Healthcare/djLint/issues/687
ignore = "H006,H021,H023,H025,H029,H030,H031,T002,T003"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2
