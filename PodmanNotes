Some general notes on using Podman and some shortcuts

To completely clean the environment

	# Containers
	podman rm -af
	# Images
	podman rmi -af
	# Volumes
	podman volume rm $(podman volume ls -q)
	# Networks
	podman network rm $(podman network ls -q)
	# Pods
	podman pod rm $(podman pod ls -q)

To correct the postgres error:

	go to the postgres container:
	podman exec -it b9a66c459fdf /bin/bash
	
	will be root. Now: 
	su - postgres

	postgres@b9a66c459fdf:~$ psql --dbname=scram --username=debug

	SELECT rolname FROM pg_roles;
	CREATE ROLE postgres;
	ALTER ROLE postgres WITH LOGIN;


General install directions with vanilla rRocky8

	- yum update
	- yum -y install podman podman-plugins containernetworking-plugins python3.12.x86_64 python3.12-pip.noarch git make netavark.x86_64 net-tools.x86_64
	- pip3.12 install podman-compose
	- pip3.12 install django-anymail
	- mkdir -p /root/.config/containers
	- cp /etc/containers/registries.conf /root/.config/containers/registries.conf

	- edit  /root/.config/containers/registries.conf with 'unqualified-search-registries = ["docker.io"]'

	- git clone https://github.com/esnet-security/SCRAM.git

	- podman-compose up   : loads images and containers
	- podman-compose down : there will be an error, this gets read for repair
	- ./load_database     : installs database
	- podman-compose down : some containers are running now, close them down
	- podman-compose up   : final start


Container infrastructure mods:

(1) edit the /etc/containers/containers.conf

[network]
# Explicitly force "netavark" as to not use the outdated CNI networking, which it would not apply otherwise as long as old stuff is there.
# This may be removed once all containers were upgraded?
# see https://discussion.fedoraproject.org/t/how-to-get-podman-dns-plugin-container-name-resolution-to-work-in-fedora-coreos-36-podman-plugins-podman-dnsname/39493/5?u=rugk

# official doc:
# Network backend determines what network driver will be used to set up and tear down container networks.
# Valid values are "cni" and "netavark".
# The default value is empty which means that it will automatically choose CNI or netavark. If there are
# already containers/images or CNI networks preset it will choose CNI.
#
# Before changing this value all containers must be stopped otherwise it is likely that
# iptables rules and network interfaces might leak on the host. A reboot will fix this.
#
network_backend = "netavark"

# List of default capabilities for containers. If it is empty or commented out,
# the default capabilities defined in the container engine will be added.
#
default_capabilities = [
  "CHOWN",
  "DAC_OVERRIDE",
  "FOWNER",
  "FSETID",
  "KILL",
  "NET_BIND_SERVICE",
  "SETFCAP",
  "SETGID",
  "SETPCAP",
  "SETUID",
  "SYS_CHROOT",
]


(2) registries.conf
Be sure to have the following line in there:
unqualified-search-registries = ["docker.io"]




-----
If you see the error:

[nginx]      | Error: unable to start container b5756315d00ad99544e38cad2c15c7639275b5e74be5c2e013ce54b5e89ea689: generating dependency graph for container b5756315d00ad99544e38cad2c15c7639275b5e74be5c2e013ce54b5e89ea689: container bedbe4722e03856c0e200e41cee4d6c3d21a61f99c19ba5cf6347c7722f593f5 depends on container f7147489340954021f5a0b15298e2835be2f2d1856588f0ecee240945e430854 not found in input list: no such container


[root@fedora-s-1vcpu-2gb-sfo3-01 SCRAM]# podman ps -a
CONTAINER ID  IMAGE                                       COMMAND               CREATED         STATUS                    PORTS                                             NAMES
d09dbec54b9d  localhost/scram_production_postgres:latest  postgres              51 seconds ago  Up 49 seconds (healthy)   5432/tcp                                          scram_postgres_1
f71474893409  docker.io/library/redis:5.0                 redis-server          51 seconds ago  Up 49 seconds (healthy)   6379/tcp                                          scram_redis_1
021234dbb965  docker.io/jauderho/gobgp:v2.32.0            /usr/local/bin/go...  51 seconds ago  Up 46 seconds (starting)  0.0.0.0:41595->50051/tcp, 179/tcp                 scram_gobgp_1
bedbe4722e03  localhost/scram_production_django:latest    /start                51 seconds ago  Up 47 seconds (healthy)                                                     scram_django_1
7ec92daeddbb  localhost/scram_translator:latest                                 50 seconds ago  Up 45 seconds                                                               scram_translator_1
b5756315d00a  docker.io/library/nginx:1.19                nginx -g daemon o...  50 seconds ago  Created                   0.0.0.0:80->80/tcp, 0.0.0.0:443->443/tcp, 80/tcp  scram_nginx_1

This has happened cause it looked for one of the dependent containers and did not find it. You can just restart the container in question.
podman container start b5756315d00a


[root@fedora-s-1vcpu-2gb-sfo3-01 SCRAM]# podman-compose systemd -a create-unit

while in your project type `podman-compose systemd -a register`

[root@fedora-s-1vcpu-2gb-sfo3-01 SCRAM]# podman-compose systemd -a register

you can use systemd commands like enable, start, stop, status, cat
all without `sudo` like this:

		systemctl --user enable --now 'podman-compose@scram'
		systemctl --user status 'podman-compose@scram'
		journalctl --user -xeu 'podman-compose@scram'

and for that to work outside a session
you might need to run the following command *once*

		sudo loginctl enable-linger 'root'

you can use podman commands like:

		podman pod ps
		podman pod stats 'pod_scram'
		podman pod logs --tail=10 -f 'pod_scram'




new diffs
move symlink from system to python 3.12
use pip3.12 to install pkgs
check out Podman-0.1
tar xvf envs.tar

